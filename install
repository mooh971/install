#!/bin/bash

#----------------------------------------------------------------------------
#               Arch Linux Installation Script - Improved
#----------------------------------------------------------------------------

# --- Colors ---
R='\033[0;31m'     # Red
G='\033[0;32m'     # Green
B='\033[0;34m'     # Blue
Y='\033[0;33m'     # Yellow
C='\033[0;36m'     # Cyan
N='\033[0m'        # No Color

# --- Functions ---
# Function to print messages with color
msg() {
  echo -e "${C}[INFO]${N} $1"
}

error() {
  echo -e "${R}[ERROR]${N} $1"
  exit 1
}

# Function to install packages inside chroot
chroot_install() {
  arch-chroot /mnt pacman -S --noconfirm --needed "$@"
}

# --- Step 1: Keyboard Layout ---
msg "Setting keyboard layout to US"
loadkeys us

# --- Step 2: Verify Boot Mode ---
if [ -d /sys/firmware/efi/efivars ]; then
  msg "System booted in UEFI mode"
else
  error "System not booted in UEFI mode. This script is designed for UEFI systems."
fi

# --- Step 3: Connect to the Internet ---
msg "Please ensure you are connected to the internet (e.g., via Ethernet or Wi-Fi)"
# You might want to add a check here (e.g., ping google.com)

# --- Step 4: Update the System Clock ---
msg "Updating system clock..."
timedatectl set-ntp true

# --- Step 5: Partition the Disk ---
lsblk
read -rp "${Y}Enter Disk Name (e.g., sda, nvme0n1): ${N}" disk

# Check if the disk exists
if ! lsblk /dev/$disk &> /dev/null; then
  error "Disk /dev/$disk not found."
fi

msg "Partitioning /dev/$disk..."
parted -s /dev/$disk mklabel gpt
parted -s /dev/$disk mkpart primary fat32 1MiB 513MiB
parted -s /dev/$disk set 1 esp on
parted -s /dev/$disk mkpart primary ext4 513MiB 100%

# --- Step 6: Format Partitions ---
msg "Formatting partitions..."
mkfs.fat -F 32 /dev/${disk}1
mkfs.ext4 /dev/${disk}2

# --- Step 7: Mount the File Systems ---
msg "Mounting file systems..."
mount /dev/${disk}2 /mnt
mkdir -p /mnt/boot
mount /dev/${disk}1 /mnt/boot

# --- Step 8: Install Essential Packages ---
msg "Installing essential packages..."
pacstrap -K /mnt base base-devel linux linux-firmware git vim neovim neofetch sudo man-db man-pages grub efibootmgr networkmanager

# --- Step 9: Generate fstab ---
msg "Generating fstab..."
genfstab -U /mnt >> /mnt/etc/fstab

# --- Step 10: Chroot into the New System ---
msg "Chrooting into the new system..."

# --- Step 11: Set Time Zone ---
msg "Setting time zone to UTC"
ln -sf /usr/share/zoneinfo/UTC /mnt/etc/localtime
arch-chroot /mnt hwclock --systohc

# --- Step 12: Localization ---
msg "Setting locale to en_US.UTF-8"
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
echo "en_US.UTF-8 UTF-8" > /mnt/etc/locale.gen
arch-chroot /mnt locale-gen

# --- Step 13: Network Configuration ---
read -rp "${Y}Enter hostname: ${N}" hostname
echo "$hostname" > /mnt/etc/hostname
cat <<EOF > /mnt/etc/hosts
127.0.0.1	localhost
::1		localhost
127.0.1.1	$hostname.localdomain	$hostname
EOF

# --- Step 14: Set Root Password ---
msg "Setting root password..."
arch-chroot /mnt passwd

# --- Step 15: Create User and Set Password ---
read -rp "${Y}Enter username: ${N}" username
arch-chroot /mnt useradd -m -G wheel,storage,video,audio -s /bin/bash "$username"
msg "Setting password for user '$username'..."
arch-chroot /mnt passwd "$username"

# --- Step 16: Install and Configure Bootloader ---
msg "Installing and configuring GRUB..."
arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# --- Step 17: Enable NetworkManager ---
msg "Enabling NetworkManager..."
arch-chroot /mnt systemctl enable NetworkManager

# --- Step 18: Install Xorg ---
msg "Installing Xorg..."
chroot_install xorg-server xorg-xinit xorg-xprop xorg-xset

# --- Step 19: Install Terminal ---
msg "Installing Kitty terminal..."
chroot_install kitty

# --- Step 20: Install Window Manager ---
echo -e "${Y}Choose Window Manager: ${N}"
select WM in i3-gaps awesome bspwm qtile; do
  if [ -n "$WM" ]; then
    msg "Installing $WM..."
    chroot_install "$WM"
    # Install picom for compositing (optional but recommended)
    chroot_install picom
    break
  else
    echo -e "${R}Invalid choice. Please select from 1 to 4.${N}"
  fi
done

# --- Step 21: Install Display Manager and Greeter---
echo -e "${Y}Choose Display Manager: ${N}"
select DM in sddm lightdm lxdm; do
  if [ -n "$DM" ]; then
    msg "Installing $DM..."
    chroot_install "$DM"
    if [ "$DM" == "lightdm" ]; then
      msg "Installing LightDM GTK Greeter..."
      chroot_install lightdm-gtk-greeter
    fi
    arch-chroot /mnt systemctl enable "$DM"
    break
  else
    echo -e "${R}Invalid choice. Please select from 1 to 3.${N}"
  fi
done

# --- Step 22: Install Browser ---
msg "Installing Firefox..."
chroot_install firefox

# --- Step 23: Install Missing Packages (Optional) ---
msg "Installing common but potentially missing packages..."
chroot_install pulseaudio pulseaudio-alsa alsa-utils pavucontrol bluez bluez-utils sof-firmware

# --- Step 24: Clean Up Pacstrap Cache ---
msg "Cleaning up pacstrap cache..."
rm -rf /mnt/var/cache/pacman/pkg/*

# --- Step 25: Create Startx File ---
msg "Creating .xinitrc for user $username"
cat << EOF > /mnt/home/$username/.xinitrc
exec $WM
EOF
arch-chroot /mnt chown $username:$username /home/$username/.xinitrc

# --- Finish ---
msg "Arch Linux installation complete!"
echo -e "${G}Reboot your system now.${N}"
echo -e "${Y}Made Arch Linux, Discord: .t5a${N}"
